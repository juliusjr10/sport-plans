openapi: 3.0.0
info:
    title: 'API Documentation'
    version: 1.0.0
    description: 'API documentation for plans, workouts, and exercises.'
servers:
    -
        url: 'http://localhost:3010'
paths:
    /exercises:
        post:
            summary: 'Create a new exercise'
            tags: [Exercises]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string, example: 'Push Up'}, sets: {type: integer, example: 3}, reps: {type: integer, example: 15}, restTime: {type: integer, example: 60}, tips: {type: string, example: 'Keep your back straight.'}, workout_id: {type: integer, example: 1}}}}}}
            responses: {'201': {description: 'Exercise created successfully', content: {application/json: {schema: {type: object, properties: {id: {type: integer, example: 1}, name: {type: string, example: 'Push Up'}, sets: {type: integer, example: 3}, reps: {type: integer, example: 15}, restTime: {type: integer, example: 60}, tips: {type: string, example: 'Keep your back straight.'}, workout_id: {type: integer, example: 1}}}}}}, '400': {description: 'All fields are required'}, '422': {description: 'Invalid input values'}}
        get:
            summary: 'Get all exercises'
            tags: [Exercises]
            responses: {'200': {description: 'A list of exercises', content: {application/json: {schema: {type: array, items: {type: object, properties: {id: {type: integer, example: 1}, name: {type: string, example: 'Push Up'}, sets: {type: integer, example: 3}, reps: {type: integer, example: 15}, restTime: {type: integer, example: 60}, tips: {type: string, example: 'Keep your back straight.'}, workout_id: {type: integer, example: 1}}}}}}}, '500': {description: 'Internal server error'}}
    '/exercises/{exercise_id}':
        get:
            summary: 'Get a specific exercise'
            tags: [Exercises]
            parameters: [{name: exercise_id, in: path, required: true, description: 'ID of the exercise', schema: {type: integer}}]
            responses: {'200': {description: 'Exercise found', content: {application/json: {schema: {type: object, properties: {id: {type: integer, example: 1}, name: {type: string, example: 'Push Up'}, sets: {type: integer, example: 3}, reps: {type: integer, example: 15}, restTime: {type: integer, example: 60}, tips: {type: string, example: 'Keep your back straight.'}, workout_id: {type: integer, example: 1}}}}}}, '404': {description: 'Exercise not found'}}
        put:
            summary: 'Update an exercise'
            tags: [Exercises]
            parameters: [{name: exercise_id, in: path, required: true, description: 'ID of the exercise', schema: {type: integer}}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string, example: 'Push Up'}, sets: {type: integer, example: 3}, reps: {type: integer, example: 15}, restTime: {type: integer, example: 60}, tips: {type: string, example: 'Keep your back straight.'}}}}}}
            responses: {'200': {description: 'Exercise updated successfully'}, '400': {description: 'All fields are required'}, '404': {description: 'Exercise not found'}, '422': {description: 'Invalid input values'}}
        delete:
            summary: 'Delete an exercise'
            tags: [Exercises]
            parameters: [{name: exercise_id, in: path, required: true, description: 'ID of the exercise', schema: {type: integer}}]
            responses: {'200': {description: 'Exercise deleted successfully'}, '404': {description: 'Exercise not found'}}
    /plans:
        post:
            summary: 'Create a new training plan'
            tags: [Plans]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {title: {type: string, example: 'Beginner Workout Plan'}, length: {type: integer, example: 30}, coach: {type: string, example: 'John Doe'}, description: {type: string, example: 'A comprehensive plan for beginners.'}}}}}}
            responses: {'201': {description: 'Plan created successfully', content: {application/json: {schema: {type: object, properties: {id: {type: integer, example: 1}, title: {type: string, example: 'Beginner Workout Plan'}, length: {type: integer, example: 30}, coach: {type: string, example: 'John Doe'}, description: {type: string, example: 'A comprehensive plan for beginners.'}}}}}}, '400': {description: 'All fields are required'}, '422': {description: 'Invalid input values'}}
        get:
            summary: 'Retrieve a list of training plans'
            tags: [Plans]
            responses: {'200': {description: 'A list of training plans', content: {application/json: {schema: {type: array, items: {type: object, properties: {id: {type: integer, example: 1}, title: {type: string, example: 'Beginner Workout Plan'}, length: {type: integer, example: 30}, coach: {type: string, example: 'John Doe'}, description: {type: string, example: 'A comprehensive plan for beginners.'}}}}}}}}
    '/plans/{id}':
        get:
            summary: 'Retrieve a specific training plan by ID'
            tags: [Plans]
            parameters: [{name: id, in: path, required: true, description: 'ID of the training plan', schema: {type: integer}}]
            responses: {'200': {description: 'A training plan found', content: {application/json: {schema: {type: object, properties: {id: {type: integer, example: 1}, title: {type: string, example: 'Beginner Workout Plan'}, length: {type: integer, example: 30}, coach: {type: string, example: 'John Doe'}, description: {type: string, example: 'A comprehensive plan for beginners.'}}}}}}, '404': {description: 'Plan not found'}}
        put:
            summary: 'Update a specific training plan'
            tags: [Plans]
            parameters: [{name: id, in: path, required: true, description: 'ID of the training plan', schema: {type: integer}}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {title: {type: string, example: 'Beginner Workout Plan'}, length: {type: integer, example: 30}, coach: {type: string, example: 'John Doe'}, description: {type: string, example: 'A comprehensive plan for beginners.'}}}}}}
            responses: {'200': {description: 'Plan updated successfully'}, '400': {description: 'All fields are required'}, '404': {description: 'Plan not found'}, '422': {description: 'Invalid input values'}}
        delete:
            summary: 'Delete a specific training plan'
            tags: [Plans]
            parameters: [{name: id, in: path, required: true, description: 'ID of the training plan', schema: {type: integer}}]
            responses: {'200': {description: 'Plan deleted successfully'}, '404': {description: 'Plan not found'}}
    '/plans/{plan_id}/workouts':
        get:
            summary: 'Retrieve all workouts for a specific plan'
            tags: [Plans]
            parameters: [{name: plan_id, in: path, required: true, description: 'ID of the training plan', schema: {type: integer}}]
            responses: {'200': {description: 'A list of workouts for the specified plan', content: {application/json: {schema: {type: array, items: {type: object, properties: {id: {type: integer, example: 1}, plan_id: {type: integer, example: 1}, name: {type: string, example: 'Morning Cardio'}, length: {type: integer, example: 30}, type: {type: string, example: Cardio}, frequency: {type: integer, example: 3}}}}}}}, '404': {description: 'Plan not found'}}
    /workouts:
        get:
            summary: 'Retrieve a list of all workouts'
            tags: [Workouts]
            responses: {'200': {description: 'A list of workouts', content: {application/json: {schema: {type: array, items: {type: object, properties: {id: {type: integer, example: 1}, plan_id: {type: integer, example: 1}, name: {type: string, example: 'Morning Cardio'}, length: {type: integer, example: 30}, type: {type: string, example: Cardio}, frequency: {type: integer, example: 3}}}}}}}}
        post:
            summary: 'Create a new workout for a specific training plan'
            tags: [Workouts]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string, example: 'Morning Cardio'}, length: {type: integer, example: 30}, type: {type: string, example: Cardio}, frequency: {type: integer, example: 3}, plan_id: {type: integer, example: 1}}}}}}
            responses: {'201': {description: 'Workout created successfully', content: {application/json: {schema: {type: object, properties: {id: {type: integer, example: 1}, plan_id: {type: integer, example: 1}, name: {type: string, example: 'Morning Cardio'}, length: {type: integer, example: 30}, type: {type: string, example: Cardio}, frequency: {type: integer, example: 3}}}}}}, '400': {description: 'All fields are required'}, '422': {description: 'Invalid input values'}}
    '/workouts/{workout_id}':
        get:
            summary: 'Retrieve a specific workout by ID'
            tags: [Workouts]
            parameters: [{name: workout_id, in: path, required: true, description: 'ID of the workout', schema: {type: integer}}]
            responses: {'200': {description: 'A workout found', content: {application/json: {schema: {type: object, properties: {id: {type: integer, example: 1}, plan_id: {type: integer, example: 1}, name: {type: string, example: 'Morning Cardio'}, length: {type: integer, example: 30}, type: {type: string, example: Cardio}, frequency: {type: integer, example: 3}}}}}}, '404': {description: 'Workout not found'}}
        put:
            summary: 'Update a specific workout'
            tags: [Workouts]
            parameters: [{name: workout_id, in: path, required: true, description: 'ID of the workout', schema: {type: integer}}]
            requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {name: {type: string, example: 'Morning Cardio'}, length: {type: integer, example: 30}, type: {type: string, example: Cardio}, frequency: {type: integer, example: 3}}}}}}
            responses: {'200': {description: 'Workout updated successfully'}, '400': {description: 'All fields are required'}, '404': {description: 'Workout not found'}, '422': {description: 'Invalid input values'}}
        delete:
            summary: 'Delete a specific workout'
            tags: [Workouts]
            parameters: [{name: workout_id, in: path, required: true, description: 'ID of the workout', schema: {type: integer}}]
            responses: {'200': {description: 'Workout deleted successfully'}, '404': {description: 'Workout not found'}}
components: {}
tags: []
